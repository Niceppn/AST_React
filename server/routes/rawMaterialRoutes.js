const express = require('express');
const router = express.Router();
const { pool } = require('../config/database');

router.get('/', async (req, res) => {
    try {
        // ‡∏£‡∏±‡∏ö date filter parameters
        const { startDate, endDate } = req.query;
        
        console.log('üìä Raw Materials API called with filters:', {
            startDate,
            endDate
        });

        let query = 'SELECT * FROM packageasts';
        let query2 = 'SELECT * FROM htrpackages';
        let queryParams = [];
        let queryParams2 = [];

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° WHERE clause ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ date filter
        if (startDate && endDate) {
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö packageasts table - ‡πÉ‡∏ä‡πâ created_at timestamp field
            query += ' WHERE DATE(created_at) BETWEEN ? AND ?';
            queryParams = [startDate, endDate];

            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö htrpackages table - ‡πÉ‡∏ä‡πâ created_at timestamp field  
            query2 += ' WHERE DATE(created_at) BETWEEN ? AND ?';
            queryParams2 = [startDate, endDate];

            console.log('üîç Executing filtered packageasts query:', query);
            console.log('üìä Packageasts filter params:', queryParams);
            
            console.log('üîç Executing filtered htrpackages query:', query2);
            console.log('üìä Htrpackages filter params:', queryParams2);
        } else {
            console.log('üìã No date filters applied - fetching all records');
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á packageasts
        const [rows] = queryParams.length > 0 
            ? await pool.execute(query, queryParams)
            : await pool.execute(query);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á htrpackages
        const [rows2] = queryParams2.length > 0
            ? await pool.execute(query2, queryParams2)
            : await pool.execute(query2);

        console.log('‚úÖ Query results:', {
            packageastsCount: rows.length,
            htrpackagesCount: rows2.length,
            dateFiltered: !!(startDate && endDate)
        });

        res.json({
            success: true,
            message: startDate && endDate 
                ? `‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${startDate} ‡∏ñ‡∏∂‡∏á ${endDate})`
                : '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            data: {
                packageasts: rows,
                htrpackages: rows2
            },
            count: {
                packageasts: rows.length,
                htrpackages: rows2.length,
                total: rows.length + rows2.length
            },
            filter: {
                startDate: startDate || null,
                endDate: endDate || null,
                applied: !!(startDate && endDate)
            }
        });
    } catch (error) {
        console.error('Error fetching package data:', error);
        res.status(500).json({
            success: false,
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à‡πÑ‡∏î‡πâ',
            error: error.message
        });
    }
});

router.get('/stockMaterial', async (req, res) => {
    try {
        // ‡∏£‡∏±‡∏ö date filter parameters
        const { startDate, endDate } = req.query;
        
        console.log('üìä StockMaterial API called with filters:', {
            startDate,
            endDate
        });

        let materialsQuery = 'SELECT * FROM materials';
        let materialstoresQuery = 'SELECT * FROM materialstores';
        let queryParams = [];
        let queryParams2 = [];

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° WHERE clause ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ date filter
        if (startDate && endDate) {
            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö materials table - ‡πÉ‡∏ä‡πâ created_at timestamp field
            materialsQuery += ' WHERE DATE(created_at) BETWEEN ? AND ?';
            queryParams = [startDate, endDate];

            // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö materialstores table - ‡πÉ‡∏ä‡πâ created_at timestamp field  
            materialstoresQuery += ' WHERE DATE(created_at) BETWEEN ? AND ?';
            queryParams2 = [startDate, endDate];

            console.log('üîç Executing filtered materials query:', materialsQuery);
            console.log('üìä Materials filter params:', queryParams);
            
            console.log('üîç Executing filtered materialstores query:', materialstoresQuery);
            console.log('üìä Materialstores filter params:', queryParams2);
        } else {
            console.log('üìã No date filters applied - fetching all records');
        }

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á materials (‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤)
        const [materialsRows] = queryParams.length > 0 
            ? await pool.execute(materialsQuery, queryParams)
            : await pool.execute(materialsQuery);

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á materialstores (‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å)
        const [materialstoresRows] = queryParams2.length > 0
            ? await pool.execute(materialstoresQuery, queryParams2)
            : await pool.execute(materialstoresQuery);

        console.log('‚úÖ Query results:', {
            materialsCount: materialsRows.length,
            materialstoresCount: materialstoresRows.length,
            dateFiltered: !!(startDate && endDate)
        });

        res.json({
            success: true,
            message: startDate && endDate 
                ? `‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${startDate} ‡∏ñ‡∏∂‡∏á ${endDate})`
                : '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            data: {
                materials: materialsRows,
                materialstores: materialstoresRows
            },
            count: {
                materials: materialsRows.length,
                materialstores: materialstoresRows.length,
                total: materialsRows.length + materialstoresRows.length
            },
            filter: {
                startDate: startDate || null,
                endDate: endDate || null,
                applied: !!(startDate && endDate)
            }
        });
    } catch (error) {
        console.error('Error fetching stock materials:', error);
        res.status(500).json({
            success: false,
            message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏î‡πâ',
            error: error.message
        });
    }
});

module.exports = router;