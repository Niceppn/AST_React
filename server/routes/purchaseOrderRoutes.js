const express = require('express');
const router = express.Router();
const mysql = require('mysql2/promise');

// Database configuration (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
const dbConfig = {
  host: process.env.DATABASE_HOST || '128.199.238.141',
  user: process.env.DATABASE_USER || 'astReact',
  password: process.env.DATABASE_PASSWORD || '12345678Q',
  database: process.env.DATABASE_NAME || 'ast',
  port: process.env.DATABASE_PORT || 3306
};

// Create connection pool
const pool = mysql.createPool(dbConfig);

// GET /api/purchase-orders - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• purchase orders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/', async (req, res) => {
  try {
    console.log('üîç Fetching all purchase orders...');
    
    const query = 'SELECT * FROM ast_purchaseorders ORDER BY created_at DESC';
    const [rows] = await pool.execute(query);
    
    console.log(`‚úÖ Found ${rows.length} purchase orders`);
    
    res.json({
      success: true,
      message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Purchase Orders ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: rows,
      count: rows.length
    });
    
  } catch (error) {
    console.error('‚ùå Error fetching purchase orders:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Purchase Orders',
      error: error.message
    });
  }
});

// GET /api/purchase-orders/:id - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• purchase order ‡∏ï‡∏≤‡∏° ID
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üîç Fetching purchase order with ID: ${id}`);
    
    const query = 'SELECT * FROM ast_purchaseorders WHERE id = ?';
    const [rows] = await pool.execute(query, [id]);
    
    if (rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö Purchase Order ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
      });
    }
    
    console.log('‚úÖ Purchase order found');
    
    res.json({
      success: true,
      message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Purchase Order ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: rows[0]
    });
    
  } catch (error) {
    console.error('‚ùå Error fetching purchase order:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Purchase Order',
      error: error.message
    });
  }
});

// POST /api/purchase-orders - ‡∏™‡∏£‡πâ‡∏≤‡∏á purchase order ‡πÉ‡∏´‡∏°‡πà
router.post('/', async (req, res) => {
  try {
    const purchaseOrderData = req.body;
    console.log('üÜï Creating new purchase order:', purchaseOrderData);
    
    // ‡∏î‡∏∂‡∏á columns ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    const [tableInfo] = await pool.execute('DESCRIBE ast_purchaseorders');
    const columns = tableInfo
      .filter(col => col.Field !== 'id' && col.Field !== 'created_at' && col.Field !== 'updated_at')
      .map(col => col.Field);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡πÅ‡∏ö‡∏ö dynamic
    const values = columns.map(col => purchaseOrderData[col] || null);
    const placeholders = columns.map(() => '?').join(', ');
    const columnNames = columns.join(', ');
    
    const query = `INSERT INTO ast_purchaseorders (${columnNames}) VALUES (${placeholders})`;
    
    const [result] = await pool.execute(query, values);
    
    console.log('‚úÖ Purchase order created with ID:', result.insertId);
    
    res.status(201).json({
      success: true,
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á Purchase Order ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        id: result.insertId,
        ...purchaseOrderData
      }
    });
    
  } catch (error) {
    console.error('‚ùå Error creating purchase order:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Purchase Order',
      error: error.message
    });
  }
});

module.exports = router;
